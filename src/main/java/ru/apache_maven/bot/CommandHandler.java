package ru.apache_maven.bot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.apache_maven.db.DatabaseManager;
import ru.apache_maven.model.*;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public class CommandHandler {
    private static final Logger logger = LoggerFactory.getLogger(CommandHandler.class);
    private final DatabaseManager db;
    private final TelegramBot bot;

    public CommandHandler(DatabaseManager db, TelegramBot bot) {
        this.db = db;
        this.bot = bot;
    }

    public void handleCommand(Update update, String command, long chatId, long userId, String text) {
        logger.info("Handling command: {} from userId={}", command, userId);
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –Ω–∞–ª–∏—á–∏—è reply-—Å–æ–æ–±—â–µ–Ω–∏—è
            if (text.equalsIgnoreCase(".—Ñ—É—Ç–ø–µ–Ω–∫–∏") && update.getMessage().getReplyToMessage() != null) {
                handlePenaltyCommand(update, chatId, userId);
            } else if (text.equalsIgnoreCase(".—Ñ—É—Ç–º–∏–Ω—É—Å–ø–µ–Ω–∫–∞") && userId == 5029600728L) {
                handleCancelPenaltyCommand(chatId);
            } else if (text.equalsIgnoreCase(".—Ñ—É—Ç–∂–æ–±") && update.getMessage().getReplyToMessage() != null) {
                handleFootjob(update, chatId, userId);
            } else if (text.equalsIgnoreCase(".—Ñ—É—Ç–ø–æ–¥–∞—Ä–æ–∫") && update.getMessage().getReplyToMessage() != null) {
                handleGiftCommand(update, chatId, userId);
            } else if (text.equalsIgnoreCase(".—Ñ—É—Ç–¥—Ä—É–∑—å—è") && update.getMessage().getReplyToMessage() != null) {
                handleAddFriendCommand(update, chatId, userId);
            } else {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ switch
                switch (command.toLowerCase()) {
                    case "—Ñ—É—Ç—Å—Ç–∞—Ä—Ç":
                        sendStartMessage(chatId, userId);
                        break;
                    case "/getcard":
                        handleGetCard(chatId, userId);
                        break;
                    case ".—Ñ—É—Ç–ø—Ä–æ—Ñ–∏–ª—å":
                        handleProfile(chatId, userId);
                        break;
                    case ".—Ñ—É—Ç–ø–∞–∫–∏":
                        handleUserPacks(chatId, userId);
                        break;
                    case ".—Ñ—É—Ç—Ç—Ä–µ–π–¥":
                        handleTradeCommand(chatId, userId);
                        break;
                    case ".—Ñ—É—Ç—Å–æ—Å—Ç–∞–≤":
                        handleSquadCommand(chatId, userId);
                        break;
                    case ".—Ñ—É—Ç–¥—Ä—É–∑—å—è":
                        handleFriendsCommand(chatId, userId);
                        break;
                    default:
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                        break;
                }
            }
        } catch (SQLException e) {
            logger.error("SQL error while handling command {}: {}", command, e.getMessage(), e);
            Utils.sendMessage(bot, chatId, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.", null);
        }
    }

    private void handleProfile(long chatId, long userId) throws SQLException {
        User user = db.getUserById(userId);
        if (user == null) {
            Utils.sendMessage(bot, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        int dollars = db.getUserDollars(userId);
        int userCardsCount = db.getUserPlayers(userId).size();
        int totalCardsCount = db.getTotalCardsCount();
        Player favoriteCard = db.getFavoriteCard(userId);
        String favoriteCardText = favoriteCard != null ? favoriteCard.getName() + " #" + favoriteCard.getId() : "–ù–µ –≤—ã–±—Ä–∞–Ω–∞";
        long points = user.getPoints();
        String title = user.getTitle();
        String premiumStatus = db.getGiftPackClaims(userId) > 0 ? "–ê–ö–¢–ò–í–ï–ù" : "–ù–ï –ê–ö–¢–ò–í–ï–ù";

        StringBuilder profileText = new StringBuilder("üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n");
        profileText.append("üí∞ –ë–∞–ª–∞–Ω—Å: ").append(dollars).append(" $\n");
        profileText.append("üìú –ö–æ–ª–ª–µ–∫—Ü–∏—è: ").append(userCardsCount).append(" / ").append(totalCardsCount).append(" –∫–∞—Ä—Ç–æ—á–µ–∫\n");
        profileText.append("‚ù§Ô∏è –õ—é–±–∏–º–∞—è –∫–∞—Ä—Ç–∞: ").append(favoriteCardText).append("\n\n");
        profileText.append("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n");
        profileText.append("üèÜ –û—á–∫–∏: ").append(points).append("\n");
        profileText.append("üéñÔ∏è –¢–∏—Ç—É–ª: ").append(title).append("\n");
        profileText.append("üíé –ü–†–ï–ú–ò–£–ú: ").append(premiumStatus);

        Utils.sendMessage(bot, chatId, profileText.toString(), null);
    }

    private void handleFootjob(Update update, long chatId, long userId) throws SQLException {
        Message message = update.getMessage();
        if (message.getReplyToMessage() == null) {
            Utils.sendMessage(bot, chatId, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!", null);
            return;
        }

        long targetUserId = message.getReplyToMessage().getFrom().getId();
        if (targetUserId == userId) {
            Utils.sendMessage(bot, chatId, "–ù–µ–ª—å–∑—è —Å–¥–µ–ª–∞—Ç—å —Ñ—É—Ç–∂–æ–± —Å–∞–º–æ–º—É —Å–µ–±–µ! üòÖ", null);
            return;
        }

        User user = db.getUserById(userId);
        User targetUser = db.getUserById(targetUserId);
        if (user == null || targetUser == null) {
            Utils.sendMessage(bot, chatId, "–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        db.addFootjob(userId, targetUserId);
        int totalFootjobs = db.getTotalFootjobsCount();
        String messageText = String.format("%s —Å–¥–µ–ª–∞–ª —Ñ—É—Ç–∂–æ–± –¥–ª—è %s –∏ –æ–Ω –∫–æ–Ω—á–∏–ª üòà\n–§—É—Ç–∂–æ–±–æ–≤ –≤—Å–µ–≥–æ - %d",
                user.getUsername(), targetUser.getUsername(), totalFootjobs);
        Utils.sendMessage(bot, chatId, messageText, null);
    }

    private void sendStartMessage(long chatId, long userId) {
        String text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! üéÆ\n\n" +
                "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É!', —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.";
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(createButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É!", "start_game_" + userId)));
        keyboard.setKeyboard(rows);
        Utils.sendMessage(bot, chatId, text, keyboard);
    }

    private void handleGetCard(long chatId, long userId) throws SQLException {
        Player player = db.getRandomPlayer();
        if (player == null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            rows.add(List.of(createButton("–ù–∞–∑–∞–¥", "start_game_" + userId)));
            keyboard.setKeyboard(rows);
            Utils.sendMessage(bot, chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞.", keyboard);
            return;
        }

        boolean isDuplicate = db.checkUserHasPlayer(userId, player.getId());
        db.addPlayerToUser(userId, player);
        db.addPoints(userId, player.getCategory().getPoints());

        if (isDuplicate) {
            int dollarsToAdd = player.getCategory().getDollars();
            db.addDollars(userId, dollarsToAdd);
            String messageText = "–†–µ–ø–ª–∏–∫–∞! üÉè\n" +
                    "–¢—ã —É–∂–µ –∏–º–µ–µ—à—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É. –ü–æ–ª—É—á–µ–Ω–æ: " + dollarsToAdd + " –¥–æ–ª–ª–∞—Ä–æ–≤.";
            Utils.sendMessage(bot, chatId, messageText, null);
        }

        Utils.sendPlayerCard(bot, db, chatId, player, player.getCategory().getPoints());
    }

    private void handlePenaltyCommand(Update update, long chatId, long userId) {
        if (bot.getCurrentGame() != null) {
            Utils.sendMessage(bot, chatId, "–£–∂–µ –∏–≥—Ä–∞–µ–º!", null);
            return;
        }

        long opponentId = update.getMessage().getReplyToMessage().getFrom().getId();
        String opponentUsername = update.getMessage().getReplyToMessage().getFrom().getFirstName();
        String challengerUsername = update.getMessage().getFrom().getFirstName();

        if (userId == opponentId) {
            Utils.sendMessage(bot, chatId, "–ù–µ–ª—å–∑—è –±—Ä–æ—Å–∏—Ç—å –≤—ã–∑–æ–≤ —Å–∞–º–æ–º—É —Å–µ–±–µ!", null);
            return;
        }

        TelegramBot.PenaltyGame game = new TelegramBot.PenaltyGame(userId, opponentId, challengerUsername, opponentUsername, chatId);
        bot.setCurrentGame(game);
        Utils.sendMessage(bot, chatId, "–°—Ç–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã! –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ç—á!", null);
        Utils.sendKickDirectionMessage(bot, chatId, userId, challengerUsername);
    }

    private void handleCancelPenaltyCommand(long chatId) {
        if (bot.getCurrentGame() == null) {
            Utils.sendMessage(bot, chatId, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∏–∫—Ç–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç –≤ —Å–µ—Ä–∏–∏ –ø–µ–Ω–∞–ª—å—Ç–∏", null);
        } else {
            bot.setCurrentGame(null);
            Utils.sendMessage(bot, chatId, "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", null);
        }
    }

    private void handleUserPacks(long chatId, long userId) throws SQLException {
        List<Pack> userPacks = db.getUserPacks(userId);
        if (userPacks.isEmpty()) {
            Utils.sendMessage(bot, chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø–∞–∫–æ–≤. –ö—É–ø–∏—Ç–µ –∏—Ö –≤ –º–∞–≥–∞–∑–∏–Ω–µ!", null);
            return;
        }

        StringBuilder packsText = new StringBuilder("üéí –í–∞—à–∏ –ø–∞–∫–∏:\n\n");
        for (Pack pack : userPacks) {
            packsText.append(String.format("üì¶ %s (x%d)\n", pack.getName(), pack.getQuantity()));
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Pack pack : userPacks) {
            rows.add(List.of(createButton("–û—Ç–∫—Ä—ã—Ç—å " + pack.getName(), "open_pack_" + pack.getId() + "_" + userId)));
        }
        rows.add(List.of(createButton("–ù–∞–∑–∞–¥", "start_game_" + userId)));
        keyboard.setKeyboard(rows);

        Utils.sendMessage(bot, chatId, packsText.toString(), keyboard);
    }

    private void handleTradeCommand(long chatId, long userId) throws SQLException {
        User user = db.getUserById(userId);
        if (user == null) {
            Utils.sendMessage(bot, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        List<Player> userPlayers = db.getUserPlayers(userId);
        if (userPlayers.isEmpty()) {
            Utils.sendMessage(bot, chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.", null);
            return;
        }

        String text = "üè™ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ –∏–≥—Ä–æ–∫–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(
                createButton("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç", "trade_market_" + userId),
                createButton("–ü—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤", "trade_sell_" + userId)
        ));
        rows.add(List.of(
                createButton("–ú–æ–∏ –ø—Ä–æ–¥–∞–∂–∏", "trade_my_sales_" + userId)
        ));
        rows.add(List.of(
                createButton("–ù–∞–∑–∞–¥", "start_game_" + userId)
        ));
        keyboard.setKeyboard(rows);

        Utils.sendMessage(bot, chatId, text, keyboard);
    }

    private void handleSquadCommand(long chatId, long userId) throws SQLException {
        User user = db.getUserById(userId);
        if (user == null) {
            Utils.sendMessage(bot, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        String text = "‚öΩ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–∞–≤–∞...";
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(List.of(createButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤", "squad_menu_" + userId)));
        keyboard.setKeyboard(rows);
        Utils.sendMessage(bot, chatId, text, keyboard);
    }

    private void handleGiftCommand(Update update, long chatId, long userId) throws SQLException {
        Message message = update.getMessage();
        long targetUserId = message.getReplyToMessage().getFrom().getId();
        if (targetUserId == userId) {
            Utils.sendMessage(bot, chatId, "–ù–µ–ª—å–∑—è –ø–æ–¥–∞—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ!", null);
            return;
        }

        User user = db.getUserById(userId);
        User targetUser = db.getUserById(targetUserId);
        if (user == null || targetUser == null) {
            Utils.sendMessage(bot, chatId, "–û–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        List<Player> userPlayers = db.getUserPlayers(userId);
        if (userPlayers.isEmpty()) {
            Utils.sendMessage(bot, chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞.", null);
            return;
        }

        StringBuilder text = new StringBuilder(String.format("üéÅ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s:\n\n", targetUser.getUsername()));
        for (Player player : userPlayers) {
            text.append(String.format("- %s (%s, %d)\n", player.getName(), player.getCategory(), player.getRating()));
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Player player : userPlayers) {
            rows.add(List.of(createButton(
                    player.getName(),
                    "gift_select_" + player.getId() + "_" + targetUserId + "_" + userId
            )));
        }
        rows.add(List.of(createButton("–ù–∞–∑–∞–¥", "start_game_" + userId)));
        keyboard.setKeyboard(rows);

        Utils.sendMessage(bot, chatId, text.toString(), keyboard);
    }

    private void handleFriendsCommand(long chatId, long userId) throws SQLException {
        User user = db.getUserById(userId);
        if (user == null) {
            Utils.sendMessage(bot, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        int page = 1; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        int pageSize = 10; // 10 –¥—Ä—É–∑–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        List<User> friends = db.getUserFriends(userId, page, pageSize);
        StringBuilder text = new StringBuilder("üë• –í–∞—à–∏ –¥—Ä—É–∑—å—è:\n\n");
        if (friends.isEmpty()) {
            text.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π .—Ñ—É—Ç–¥—Ä—É–∑—å—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.");
        } else {
            for (User friend : friends) {
                text.append(String.format("- %s\n", friend.getUsername()));
            }
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (User friend : friends) {
            rows.add(List.of(createButton(
                    String.format("–£–¥–∞–ª–∏—Ç—å %s", friend.getUsername()),
                    "friends_remove_" + friend.getId() + "_" + userId
            )));
        }

        // –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        List<InlineKeyboardButton> paginationRow = new ArrayList<>();
        if (page > 1) {
            paginationRow.add(createButton("‚¨Ö –ù–∞–∑–∞–¥", "friends_list_page_" + (page - 1) + "_" + userId));
        }
        if (friends.size() == pageSize) {
            paginationRow.add(createButton("–í–ø–µ—Ä—ë–¥ ‚û°", "friends_list_page_" + (page + 1) + "_" + userId));
        }
        if (!paginationRow.isEmpty()) {
            rows.add(paginationRow);
        }

        rows.add(List.of(createButton("–ù–∞–∑–∞–¥", "start_game_" + userId)));
        keyboard.setKeyboard(rows);

        Utils.sendMessage(bot, chatId, text.toString(), keyboard);
    }

    private void handleAddFriendCommand(Update update, long chatId, long userId) throws SQLException {
        Message message = update.getMessage();
        if (message.getReplyToMessage() == null || message.getReplyToMessage().getFrom() == null) {
            Utils.sendMessage(bot, chatId, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –¥—Ä—É–∑—å—è.", null);
            return;
        }
        long friendId = message.getReplyToMessage().getFrom().getId();
        if (friendId == userId) {
            Utils.sendMessage(bot, chatId, "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è.", null);
            return;
        }

        User user = db.getUserById(userId);
        User friend = db.getUserById(friendId);
        if (user == null || friend == null) {
            Utils.sendMessage(bot, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç friendId –∫ userId
        boolean hasPendingRequest = db.hasPendingFriendRequest(userId, friendId);
        if (hasPendingRequest) {
            // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
            try {
                db.acceptFriend(userId, friendId);
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                rows.add(List.of(createButton("–ù–∞–∑–∞–¥", "friends_list_" + userId)));
                keyboard.setKeyboard(rows);
                Utils.sendMessage(bot, chatId, "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç @" + friend.getUsername() + "!", keyboard);
                Utils.sendMessage(bot, friendId, "üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + user.getUsername() + " –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã!", null);
            } catch (SQLException e) {
                logger.error("Failed to accept friend request: userId={}, friendId={}", userId, friendId, e);
                Utils.sendMessage(bot, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã.", null);
            }
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –¥—Ä—É–∑—å—è–º–∏ –∏–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ –∑–∞–ø—Ä–æ—Å


            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É
            try {
                db.addFriend(userId, friendId);
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                rows.add(List.of(createButton("–ù–∞–∑–∞–¥", "friends_list_" + userId)));
                keyboard.setKeyboard(rows);
                Utils.sendMessage(bot, chatId, "üì© –ó–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @" + friend.getUsername() + ".", keyboard);
                Utils.sendMessage(bot, friendId, "üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @" + user.getUsername() + " —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è. –û—Ç–≤–µ—Ç—å—Ç–µ .—Ñ—É—Ç–¥—Ä—É–∑—å—è –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è.", null);
            } catch (SQLException e) {
                logger.error("Failed to add friend: userId={}, friendId={}", userId, friendId, e);
                Utils.sendMessage(bot, chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –¥—Ä—É–∂–±—ã.", null);
            }
        }
    }

    private static InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }
}