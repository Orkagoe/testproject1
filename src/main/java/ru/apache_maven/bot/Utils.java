package ru.apache_maven.bot;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.apache_maven.db.DatabaseManager;
import ru.apache_maven.model.*;

import java.io.File;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;

public class Utils {
    private static final Logger logger = LoggerFactory.getLogger(Utils.class);
    private static final long SPIN_COOLDOWN = 2 * 60 * 60 * 1000; // 2 —á–∞—Å–∞
    private static final long GIFT_COOLDOWN = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    public static void sendMessage(TelegramBot bot, long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        if (keyboard != null) {
            message.setReplyMarkup(keyboard);
        }
        message.setParseMode("HTML");
        try {
            bot.execute(message);
        } catch (Exception e) {
            logger.error("Failed to send message to chatId {}: {}", chatId, e.getMessage(), e);
        }
    }

    // –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    public static void sendMessage(TelegramBot bot, long chatId, String text) {
        sendMessage(bot, chatId, text, null);
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    public static void editMessage(TelegramBot bot, long chatId, int messageId, String text, InlineKeyboardMarkup keyboard) {
        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(String.valueOf(chatId));
        editMessage.setMessageId(messageId);
        editMessage.setText(text);
        if (keyboard != null) {
            editMessage.setReplyMarkup(keyboard);
        }
        editMessage.setParseMode("HTML");
        try {
            bot.execute(editMessage);
        } catch (TelegramApiException e) {
            logger.error("Failed to edit message with ID {} in chat {}: {}", messageId, chatId, e.getMessage(), e);
            sendMessage(bot, chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public static void sendProfileMessage(TelegramBot bot, long userId, long chatId) {
        try (DatabaseManager db = new DatabaseManager()) {
            User user = db.getUserById(userId);
            if (user == null) {
                sendMessage(bot, chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.");
                return;
            }

            long points = db.getUserPoints(userId);
            int playerCount = db.getUserPlayers(userId).size();
            int dollars = db.getUserDollars(userId);

            StringBuilder profileText = new StringBuilder();
            profileText.append("<b>–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:</b>\n\n")
                    .append("üë§ <b>").append(user.getUsername()).append("</b>\n")
                    .append("üéØ –û—á–∫–∏: ").append(points).append("\n")
                    .append("üíµ –î–æ–ª–ª–∞—Ä—ã: ").append(dollars).append("\n")
                    .append("üë• –ò–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ").append(playerCount).append("\n");

            Clan clan = db.getUserClan(userId);
            if (clan != null) {
                profileText.append("üè∞ –ö–ª–∞–Ω: ").append(clan.getName()).append("\n");
            }

            sendMessage(bot, chatId, profileText.toString());
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            sendMessage(bot, chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.");
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å —Ñ–æ—Ç–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    public static void sendPlayerCard(TelegramBot bot, DatabaseManager db, long chatId, Player player, int pointsAwarded) {
        try {
            String teamName = db.getTeamName(player.getTeamId());
            String leagueName = db.getLeagueName(db.getTeamLeagueId(player.getTeamId()));
            StringBuilder cardText = new StringBuilder();
            cardText.append("<b>–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞:</b>\n\n")
                    .append(player.getName()).append(" ").append(player.getCategory().getEmoji()).append("\n")
                    .append("–ö–æ–º–∞–Ω–¥–∞: ").append(teamName).append("\n")
                    .append("–õ–∏–≥–∞: ").append(leagueName).append("\n")
                    .append("–ü–æ–∑–∏—Ü–∏—è: ").append(player.getPosition()).append("\n")
                    .append("–†–µ–π—Ç–∏–Ω–≥: ").append(player.getRating()).append("\n")
                    .append("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").append(player.getCategory().getName()).append("\n");

            if (pointsAwarded > 0) {
                cardText.append("–û—á–∫–∏: +").append(pointsAwarded).append("\n");
            }

            SendPhoto photoMessage = new SendPhoto();
            photoMessage.setChatId(chatId);

            String photoPath = "resources/photos/" + player.getPhoto();
            logger.info("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ: {}. –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –≤ classpath: {}", player.getPhoto(), photoPath);
            java.net.URL photoUrl = Utils.class.getClassLoader().getResource(photoPath);
            if (photoUrl == null) {
                logger.error("–†–µ—Å—É—Ä—Å —Ñ–æ—Ç–æ {} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ classpath. –û–∂–∏–¥–∞–µ–º—ã–π –ø—É—Ç—å: {}. –¢–µ–∫—É—â–∞—è —Ä–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {}",
                        player.getPhoto(), photoPath, System.getProperty("user.dir"));
                sendMessage(bot, chatId, cardText.toString());
                return;
            }

            File photoFile;
            try {
                logger.info("URL —Ä–µ—Å—É—Ä—Å–∞: {}", photoUrl);
                photoFile = new File(photoUrl.toURI());
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è URL —Ä–µ—Å—É—Ä—Å–∞ –≤ —Ñ–∞–π–ª –¥–ª—è {}: {}", photoPath, e.getMessage(), e);
                sendMessage(bot, chatId, cardText.toString());
                return;
            }

            logger.info("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {}", photoFile.getAbsolutePath());
            if (!photoFile.exists()) {
                logger.error("–§–∞–π–ª —Ñ–æ—Ç–æ {} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {}", photoPath, photoFile.getAbsolutePath());
                sendMessage(bot, chatId, cardText.toString());
                return;
            }

            photoMessage.setPhoto(new InputFile(photoFile));
            photoMessage.setCaption(cardText.toString());
            photoMessage.setParseMode("HTML");

            try {
                bot.execute(photoMessage);
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–≥—Ä–æ–∫–∞ {}: {}", player.getName(), e.getMessage(), e);
                sendMessage(bot, chatId, cardText.toString());
            }
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞: {}", e.getMessage(), e);
            sendMessage(bot, chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞.");
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—É–ª–¥–∞—É–Ω–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–æ–ª–ª–∞—Ä–æ–≤
    public static void sendPlayerCardWithCooldown(TelegramBot bot, DatabaseManager db, long userId, long chatId) {
        try {
            int claims = db.checkAndResetGiftPackClaims(userId);
            if (claims >= 3) {
                sendMessage(bot, chatId, "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 3 –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 24 —á–∞—Å–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞.");
                return;
            }

            Timestamp lastSpin = db.getLastSpin(userId);
            long currentTime = System.currentTimeMillis();
            if (lastSpin != null && (currentTime - lastSpin.getTime()) < SPIN_COOLDOWN) {
                long remainingTime = SPIN_COOLDOWN - (currentTime - lastSpin.getTime());
                sendMessage(bot, chatId, "–°–ª–µ–¥—É—é—â–∏–π —Å–ø–∏–Ω –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ " + formatTime(remainingTime) + ".");
                return;
            }

            Player player = db.getRandomPlayer();
            if (player == null) {
                sendMessage(bot, chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä–æ–∫–∞.");
                return;
            }

            boolean isDuplicate = db.checkUserHasPlayer(userId, player.getId());
            db.addPlayerToUser(userId, player);
            db.addPoints(userId, player.getCategory().getPoints());

            int dollarsAwarded = 0;
            if (isDuplicate) {
                dollarsAwarded = player.getCategory().getDollars();
                db.addDollars(userId, dollarsAwarded);
            }

            db.updateLastSpin(userId);
            db.incrementGiftPackClaims(userId);

            String teamName = db.getTeamName(player.getTeamId());
            String leagueName = db.getLeagueName(db.getTeamLeagueId(player.getTeamId()));
            StringBuilder cardText = new StringBuilder();
            cardText.append("<b>‚öΩ –ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä–æ–∫–∞:</b>\n\n")
                    .append(player.getName()).append(" ").append(player.getCategory().getEmoji()).append("\n")
                    .append("\uD83C\uDFC6 –ö–æ–º–∞–Ω–¥–∞: ").append(teamName).append("\n")
                    .append("–õ–∏–≥–∞: ").append(leagueName).append("\n")
                    .append("–ü–æ–∑–∏—Ü–∏—è: ").append(player.getPosition()).append("\n")
                    .append("–†–µ–π—Ç–∏–Ω–≥: ").append(player.getRating()).append("\n")
                    .append("–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ").append(player.getCategory().getName()).append("\n")
                    .append("–û—á–∫–∏: +").append(player.getCategory().getPoints()).append("\n");

            if (isDuplicate) {
                cardText.append("\n<b>–†–µ–ø–ª–∏–∫–∞, –∫–∞—Ä—Ç–æ—á–∫–∞ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å, –ø–æ–ª—É—á–∏—Ç–µ –¥–æ–ª–ª–∞—Ä—ã: +").append(dollarsAwarded).append(" üíµ</b>");
            }

            SendPhoto photoMessage = new SendPhoto();
            photoMessage.setChatId(chatId);
            photoMessage.setPhoto(new InputFile(new File(player.getPhoto())));
            photoMessage.setCaption(cardText.toString());
            photoMessage.setParseMode("HTML");

            try {
                bot.execute(photoMessage);
            } catch (Exception e) {
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –∏–≥—Ä–æ–∫–∞ {}: {}", player.getName(), e.getMessage(), e);
                sendMessage(bot, chatId, cardText.toString());
            }
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            sendMessage(bot, chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä–æ–∫–∞.");
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ª–∏–≥–∞–º–∏
    public static InlineKeyboardMarkup createLeagueKeyboard(List<League> leagues, String prefix, long userId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (League league : leagues) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(league.getName());
            button.setCallbackData(prefix + "_league_" + league.getId() + "_" + userId);
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button);
            rows.add(row);
        }
        keyboard.setKeyboard(rows);
        return keyboard;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    public static InlineKeyboardMarkup createTeamKeyboard(List<Team> teams, String prefix, long userId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Team team : teams) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(team.getName());
            button.setCallbackData(prefix + "_team_" + team.getId() + "_" + userId);
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button);
            rows.add(row);
        }
        keyboard.setKeyboard(rows);
        return keyboard;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∏–≥—Ä–æ–∫–∞–º–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    public static InlineKeyboardMarkup createPlayerKeyboard(DatabaseManager db, List<Player> players, String prefix, long userId, int page, int pageSize, String position) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        int startIndex = (page - 1) * pageSize;
        int endIndex = Math.min(startIndex + pageSize, players.size());
        List<Player> playersOnPage = players.subList(startIndex, endIndex);

        for (Player player : playersOnPage) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(player.getName() + " " + player.getCategory().getEmoji() + " (" + player.getRating() + ")");
            button.setCallbackData(prefix + "_player_" + player.getId() + "_" + player.getTeamId() + "_" + userId);
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(button);
            rows.add(row);
        }

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        if (page > 1) {
            InlineKeyboardButton prevButton = new InlineKeyboardButton();
            prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
            prevButton.setCallbackData(prefix + "_" + position + "_" + userId + "_page_" + (page - 1));
            navRow.add(prevButton);
        }
        if (endIndex < players.size()) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
            nextButton.setCallbackData(prefix + "_" + position + "_" + userId + "_page_" + (page + 1));
            navRow.add(nextButton);
        }
        if (!navRow.isEmpty()) {
            rows.add(navRow);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        if (prefix.startsWith("squad_select_")) {
            backButton.setCallbackData("squad_menu_" + userId);
        } else if (prefix.startsWith("inventory")) {
            int teamId = -1;
            if (position.contains("_")) {
                try {
                    teamId = Integer.parseInt(position.split("_")[1]);
                } catch (NumberFormatException e) {
                    logger.error("Failed to parse teamId from position: {}", position, e);
                }
            }
            int leagueId = -1;
            if (teamId != -1) {
                try {
                    leagueId = db.getTeamLeagueId(teamId);
                } catch (SQLException e) {
                    logger.error("Failed to fetch leagueId for teamId {}: {}", teamId, e.getMessage(), e);
                }
            }
            if (leagueId == -1) {
                backButton.setCallbackData("inventory_start_" + userId);
            } else {
                backButton.setCallbackData("inventory_league_" + leagueId + "_" + userId);
            }
        } else if (prefix.startsWith("teams")) {
            int teamId = -1;
            if (position.contains("_")) {
                try {
                    teamId = Integer.parseInt(position.split("_")[1]);
                } catch (NumberFormatException e) {
                    logger.error("Failed to parse teamId from position: {}", position, e);
                }
            }
            int leagueId = -1;
            if (teamId != -1) {
                try {
                    leagueId = db.getTeamLeagueId(teamId);
                } catch (SQLException e) {
                    logger.error("Failed to fetch leagueId for teamId {}: {}", teamId, e.getMessage(), e);
                }
            }
            if (leagueId == -1) {
                backButton.setCallbackData("teams_start_" + userId);
            } else {
                backButton.setCallbackData("teams_league_" + leagueId + "_" + userId);
            }
        }
        backRow.add(backButton);
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    // –ü–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    public static InlineKeyboardMarkup createPlayerKeyboard(DatabaseManager db, List<Player> players, String prefix, long userId) {
        return createPlayerKeyboard(db, players, prefix, userId, 1, Integer.MAX_VALUE, "");
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É!" –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    public static void handleStartGame(TelegramBot bot, CallbackQuery callbackQuery, int messageId, long userId) {
        long chatId = callbackQuery.getMessage().getChatId();
        String text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n\n" +
                "üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å - –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.\n" +
                "üéÅ –ü–∞–∫–∏ - –û—Ç–∫—Ä–æ–π—Ç–µ —Å–≤–æ–∏ –ø–∞–∫–∏.\n" +
                "üèÜ –†–µ–π—Ç–∏–Ω–≥ - –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º.\n" +
                "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –Ω–∞–±–æ—Ä - –ü–æ–ª—É—á–∏—Ç–µ –¥–æ 3 –∏–≥—Ä–æ–∫–æ–≤.\n" +
                "üè∞ –ö–ª–∞–Ω—ã - –°–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –≤—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–ª–∞–Ω.\n" +
                "‚öΩ –ú–æ–π —Å–æ—Å—Ç–∞–≤ - –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π —Å–æ—Å—Ç–∞–≤.";

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton inventoryButton = new InlineKeyboardButton();
        inventoryButton.setText("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å");
        inventoryButton.setCallbackData("inventory_start_" + userId);
        row1.add(inventoryButton);

        InlineKeyboardButton packsButton = new InlineKeyboardButton();
        packsButton.setText("üéÅ –ü–∞–∫–∏");
        packsButton.setCallbackData("packs_menu_" + userId);
        row1.add(packsButton);
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton ratingsButton = new InlineKeyboardButton();
        ratingsButton.setText("üèÜ –†–µ–π—Ç–∏–Ω–≥");
        ratingsButton.setCallbackData("ratings_" + userId);
        row2.add(ratingsButton);

        InlineKeyboardButton giftButton = new InlineKeyboardButton();
        giftButton.setText("üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –Ω–∞–±–æ—Ä");
        giftButton.setCallbackData("gift_" + userId);
        row2.add(giftButton);
        rows.add(row2);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton clansButton = new InlineKeyboardButton();
        clansButton.setText("üè∞ –ö–ª–∞–Ω—ã");
        clansButton.setCallbackData("clans_menu_" + userId);
        row3.add(clansButton);

        InlineKeyboardButton squadButton = new InlineKeyboardButton();
        squadButton.setText("‚öΩ –ú–æ–π —Å–æ—Å—Ç–∞–≤");
        squadButton.setCallbackData("squad_menu_" + userId);
        row3.add(squadButton);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text, keyboard);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –ø–∞–∫–æ–≤
    public static void handlePacksMenu(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        String text = "üéÅ –ú–µ–Ω—é –ø–∞–∫–æ–≤:\n\n" +
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n" +
                "üéÅ –ú–æ–∏ –ø–∞–∫–∏ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –ø–∞–∫–∏.\n" +
                "üíµ –ü–∞–∫–∏ –∑–∞ üíµ - –ö—É–ø–∏—Ç—å –ø–∞–∫–∏ –∑–∞ –¥–µ–Ω—å–≥–∏.\n" +
                "üíé –ü–∞–∫–∏ –∑–∞ üíé - –ö—É–ø–∏—Ç—å –ø–∞–∫–∏ –∑–∞ –∞–ª–º–∞–∑—ã.";

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton myPacksButton = new InlineKeyboardButton();
        myPacksButton.setText("üéÅ –ú–æ–∏ –ø–∞–∫–∏");
        myPacksButton.setCallbackData("packs_my_" + userId);
        row1.add(myPacksButton);
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton moneyPacksButton = new InlineKeyboardButton();
        moneyPacksButton.setText("üíµ –ü–∞–∫–∏ –∑–∞ üíµ");
        moneyPacksButton.setCallbackData("packs_money_" + userId);
        row2.add(moneyPacksButton);
        rows.add(row2);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton diamondPacksButton = new InlineKeyboardButton();
        diamondPacksButton.setText("üíé –ü–∞–∫–∏ –∑–∞ üíé");
        diamondPacksButton.setCallbackData("packs_diamond_" + userId);
        row3.add(diamondPacksButton);
        rows.add(row3);

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("start_game_" + userId);
        backRow.add(backButton);
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text, keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞
    public static void handleBuyPack(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, int packId) {
        try {
            Pack pack = db.getPackById(packId);
            if (pack == null) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                List<InlineKeyboardButton> backRow = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("packs_menu_" + userId);
                backRow.add(backButton);
                rows.add(backRow);
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyboard);
                return;
            }

            int userDollars = db.getUserDollars(userId);
            if (userDollars < pack.getPrice()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                List<InlineKeyboardButton> backRow = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("packs_menu_" + userId);
                backRow.add(backButton);
                rows.add(backRow);
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–∞ " + pack.getName() + ".", keyboard);
                return;
            }

            db.deductDollars(userId, pack.getPrice());
            db.addPackToUser(userId, packId);

            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("packs_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ø–∞–∫ " + pack.getName() + "!", keyboard);
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–∫–∞ {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", packId, userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∞–∫–∞.", null);
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–∫–∞
    public static void openPack(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        try {
            // 1) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            List<Pack> packs = db.getUserPacks(userId);
            if (packs == null || packs.isEmpty()) {
                Utils.sendMessage(bot, chatId, "–£ –≤–∞—Å –Ω–µ—Ç –ø–∞–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è.");
                return;
            }

            // 2) –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –ø–∞–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
            Pack pack = packs.get(0);
            int packId = pack.getId();

            // 3) –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–∞
            Pack fullPack = db.getPackById(packId);
            if (fullPack == null || fullPack.getId() == 0) {
                logger.error("Pack not found or invalid: packId={}", packId);
                Utils.editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ü–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", null);
                return;
            }

            // 4) –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º –ø–∞–∫–æ–º
            if (!db.checkUserHasPack(userId, packId)) {
                logger.warn("User {} does not have packId={}", userId, packId);
                Utils.editMessage(bot, chatId, messageId, "–£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø–∞–∫–∞.", null);
                return;
            }

            // 5) –£–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–∞–∫–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.removePackFromUser(userId, packId);

            // 6) –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            String packName = fullPack.getName() != null ? fullPack.getName() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫";
            StringBuilder text = new StringBuilder("üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –ø–∞–∫ ¬´")
                    .append(packName)
                    .append("¬ª!\n–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:\n");

            for (int i = 0; i < fullPack.getPlayerCount(); i++) {
                Player player = fullPack.getCategory() != null
                        ? db.getRandomPlayerByCategory(fullPack.getCategory())
                        : db.getRandomPlayer();

                if (player != null) {
                    db.addPlayerToUser(userId, player);
                    text.append(String.format("- %s (%s, %d)\n",
                            player.getName(),
                            player.getPosition(),
                            player.getRating()
                    ));
                } else {
                    logger.warn("No player received when opening packId={} for userId={}", packId, userId);
                }
            }

            // 7) –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é –ø–∞–∫–æ–≤
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("packs_my_" + userId);
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(
                    List.of(List.of(backButton))
            );

            // 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ editMessage
            Utils.editMessage(bot, chatId, messageId, text.toString(), keyboard);

        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            Utils.editMessage(bot, chatId, messageId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–∫–∞.", null);
        }
    }


    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public static void handleInventoryNavigation(TelegramBot bot, DatabaseManager db, CallbackQuery callbackQuery, int messageId, long userId) {
        String data = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();

        logger.info("handleInventoryNavigation called with chatId: {}, messageId: {}, userId: {}, data: {}", chatId, messageId, userId, data);

        String[] parts = data.split("_");
        if (parts.length < 3) {
            logger.error("Invalid CallbackData format: {}", data);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", null);
            return;
        }

        if (parts[1].equals("start")) {
            List<League> leagues;
            try {
                leagues = db.getLeagues();
            } catch (SQLException e) {
                logger.error("Failed to fetch leagues: {}", e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–≥.", null);
                return;
            }
            if (leagues == null || leagues.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("start_game_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–õ–∏–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", keyboard);
                return;
            }
            String text = "–í—ã–±–µ—Ä–∏—Ç–µ –õ–∏–≥—É:";
            InlineKeyboardMarkup keyboard = createLeagueKeyboard(leagues, "inventory", userId);
            List<List<InlineKeyboardButton>> rows = keyboard.getKeyboard();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("start_game_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, text, keyboard);
        } else if (parts[1].equals("league")) {
            int leagueId;
            try {
                leagueId = Integer.parseInt(parts[2]);
            } catch (NumberFormatException e) {
                logger.error("Failed to parse leagueId from CallbackData: {}", data, e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏–≥–∏.", null);
                return;
            }

            List<Team> teams;
            try {
                teams = db.getTeamsByLeague(leagueId);
            } catch (SQLException e) {
                logger.error("Failed to fetch teams for leagueId {}: {}", leagueId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –ª–∏–≥–∏.", null);
                return;
            }

            if (teams == null || teams.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("inventory_start_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                String leagueName;
                try {
                    leagueName = db.getLeagueName(leagueId);
                } catch (SQLException e) {
                    logger.error("Failed to fetch league name for leagueId {}: {}", leagueId, e.getMessage(), e);
                    leagueName = "ID " + leagueId;
                }
                editMessage(bot, chatId, messageId, "–ö–æ–º–∞–Ω–¥—ã –≤ –ª–∏–≥–µ " + leagueName + " –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", keyboard);
                return;
            }

            String leagueName;
            try {
                leagueName = db.getLeagueName(leagueId);
            } catch (SQLException e) {
                logger.error("Failed to fetch league name for leagueId {}: {}", leagueId, e.getMessage(), e);
                leagueName = "ID " + leagueId;
            }
            String text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –õ–∏–≥–∏: " + leagueName;
            InlineKeyboardMarkup keyboard = createTeamKeyboard(teams, "inventory", userId);
            List<List<InlineKeyboardButton>> rows = keyboard.getKeyboard();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("inventory_start_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, text, keyboard);
        } else if (parts[1].equals("team")) {
            int teamId;
            try {
                teamId = Integer.parseInt(parts[2]);
            } catch (NumberFormatException e) {
                logger.error("Failed to parse teamId from CallbackData: {}", data, e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã.", null);
                return;
            }

            int page = 1;
            if (parts.length > 4 && parts[parts.length - 2].equals("page")) {
                try {
                    page = Integer.parseInt(parts[parts.length - 1]);
                } catch (NumberFormatException e) {
                    logger.error("Failed to parse page number from CallbackData: {}", data, e);
                    page = 1;
                }
            }

            List<Player> players;
            try {
                players = db.getUserPlayersByTeam(userId, teamId);
            } catch (SQLException e) {
                logger.error("Failed to fetch players for userId {} and teamId {}: {}", userId, teamId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.", null);
                return;
            }

            String teamName;
            try {
                teamName = db.getTeamName(teamId);
            } catch (SQLException e) {
                logger.error("Failed to fetch team name for teamId {}: {}", teamId, e.getMessage(), e);
                teamName = "ID " + teamId;
            }

            if (players == null || players.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                int leagueId;
                try {
                    leagueId = db.getTeamLeagueId(teamId);
                } catch (SQLException e) {
                    logger.error("Failed to fetch leagueId for teamId {}: {}", teamId, e.getMessage(), e);
                    editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ª–∏–≥–∏ –∫–æ–º–∞–Ω–¥—ã.", null);
                    return;
                }
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("inventory_league_" + leagueId + "_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã " + teamName + "!", keyboard);
            } else {
                int pageSize = 5;
                String text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã " + teamName + " (–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + "):";
                InlineKeyboardMarkup keyboard = createPlayerKeyboard(db, players, "inventory", userId, page, pageSize, "team_" + teamId);
                editMessage(bot, chatId, messageId, text, keyboard);
            }
        } else if (parts[1].equals("player")) {
            int playerId;
            try {
                playerId = Integer.parseInt(parts[2]);
            } catch (NumberFormatException e) {
                logger.error("Failed to parse playerId from CallbackData: {}", data, e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞.", null);
                return;
            }

            Player player;
            try {
                player = db.getPlayerById(playerId);
            } catch (SQLException e) {
                logger.error("Failed to fetch player with playerId {}: {}", playerId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", null);
                return;
            }

            if (player == null) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("inventory_team_" + parts[3] + "_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyboard);
                return;
            }
            sendPlayerCard(bot, db, chatId, player, 0);
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("inventory_team_" + player.getTeamId() + "_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä–æ–∫–∞:", keyboard);
        }
    }

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public static void handleTeamsNavigation(TelegramBot bot, DatabaseManager db, CallbackQuery callbackQuery, long userId, int messageId) {
        String data = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();

        String[] parts = data.split("_");

        if (parts[1].equals("start")) {
            List<League> leagues;
            try {
                leagues = db.getLeagues();
            } catch (SQLException e) {
                logger.error("Failed to fetch leagues: {}", e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏–≥.", null);
                return;
            }
            if (leagues == null || leagues.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("start_game_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–õ–∏–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", keyboard);
                return;
            }
            String text = "–í—ã–±–µ—Ä–∏—Ç–µ –õ–∏–≥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥:";
            InlineKeyboardMarkup keyboard = createLeagueKeyboard(leagues, "teams", userId);
            List<List<InlineKeyboardButton>> rows = keyboard.getKeyboard();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("start_game_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, text, keyboard);
        } else if (parts[1].equals("league")) {
            int leagueId;
            try {
                leagueId = Integer.parseInt(parts[2]);
            } catch (NumberFormatException e) {
                logger.error("Failed to parse leagueId from CallbackData: {}", data, e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ª–∏–≥–∏.", null);
                return;
            }
            List<Team> teams;
            try {
                teams = db.getTeamsByLeague(leagueId);
            } catch (SQLException e) {
                logger.error("Failed to fetch teams for leagueId {}: {}", leagueId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥ –∏–∑ –ª–∏–≥–∏.", null);
                return;
            }
            if (teams == null || teams.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("teams_start_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                String leagueName;
                try {
                    leagueName = db.getLeagueName(leagueId);
                } catch (SQLException e) {
                    logger.error("Failed to fetch league name for leagueId {}: {}", leagueId, e.getMessage(), e);
                    leagueName = "ID " + leagueId;
                }
                editMessage(bot, chatId, messageId, "–ö–æ–º–∞–Ω–¥—ã –≤ –ª–∏–≥–µ " + leagueName + " –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", keyboard);
                return;
            }

            List<Team> userTeams = new ArrayList<>();
            for (Team team : teams) {
                List<Player> players;
                try {
                    players = db.getUserPlayersByTeam(userId, team.getId());
                } catch (SQLException e) {
                    logger.error("Failed to fetch players for userId {} and teamId {}: {}", userId, team.getId(), e.getMessage(), e);
                    editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.", null);
                    return;
                }
                if (!players.isEmpty()) {
                    userTeams.add(team);
                }
            }

            String leagueName;
            try {
                leagueName = db.getLeagueName(leagueId);
            } catch (SQLException e) {
                logger.error("Failed to fetch league name for leagueId {}: {}", leagueId, e.getMessage(), e);
                leagueName = "ID " + leagueId;
            }

            if (userTeams.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("teams_start_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö –ª–∏–≥–∏ " + leagueName + ".", keyboard);
                return;
            }

            String text = "–í–∞—à–∏ –∫–æ–º–∞–Ω–¥—ã –≤ –ª–∏–≥–µ " + leagueName + ":";
            InlineKeyboardMarkup keyboard = createTeamKeyboard(userTeams, "teams", userId);
            List<List<InlineKeyboardButton>> rows = keyboard.getKeyboard();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("teams_start_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, text, keyboard);
        } else if (parts[1].equals("team")) {
            int teamId;
            try {
                teamId = Integer.parseInt(parts[2]);
            } catch (NumberFormatException e) {
                logger.error("Failed to parse teamId from CallbackData: {}", data, e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–æ–º–∞–Ω–¥—ã.", null);
                return;
            }

            int page = 1;
            if (parts.length > 4 && parts[parts.length - 2].equals("page")) {
                try {
                    page = Integer.parseInt(parts[parts.length - 1]);
                } catch (NumberFormatException e) {
                    logger.error("Failed to parse page number from CallbackData: {}", data, e);
                    page = 1;
                }
            }

            List<Player> players;
            try {
                players = db.getUserPlayersByTeam(userId, teamId);
            } catch (SQLException e) {
                logger.error("Failed to fetch players for userId {} and teamId {}: {}", userId, teamId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã.", null);
                return;
            }

            String teamName;
            try {
                teamName = db.getTeamName(teamId);
            } catch (SQLException e) {
                logger.error("Failed to fetch team name for teamId {}: {}", teamId, e.getMessage(), e);
                teamName = "ID " + teamId;
            }

            int leagueId;
            try {
                leagueId = db.getTeamLeagueId(teamId);
            } catch (SQLException e) {
                logger.error("Failed to fetch leagueId for teamId {}: {}", teamId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ª–∏–≥–∏ –∫–æ–º–∞–Ω–¥—ã.", null);
                return;
            }

            String leagueName;
            try {
                leagueName = db.getLeagueName(leagueId);
            } catch (SQLException e) {
                logger.error("Failed to fetch league name for leagueId {}: {}", leagueId, e.getMessage(), e);
                leagueName = "ID " + leagueId;
            }

            if (players == null || players.isEmpty()) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("teams_league_" + leagueId + "_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã " + teamName + "!", keyboard);
            } else {
                int pageSize = 5;
                String text = "–í–∞—à–∏ –∏–≥—Ä–æ–∫–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã " + teamName + " (" + leagueName + ") (–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + "):";
                InlineKeyboardMarkup keyboard = createPlayerKeyboard(db, players, "teams", userId, page, pageSize, "team_" + teamId);
                editMessage(bot, chatId, messageId, text, keyboard);
            }
        } else if (parts[1].equals("player")) {
            int playerId;
            try {
                playerId = Integer.parseInt(parts[2]);
            } catch (NumberFormatException e) {
                logger.error("Failed to parse playerId from CallbackData: {}", data, e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞.", null);
                return;
            }
            Player player;
            try {
                player = db.getPlayerById(playerId);
            } catch (SQLException e) {
                logger.error("Failed to fetch player with playerId {}: {}", playerId, e.getMessage(), e);
                editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", null);
                return;
            }
            if (player == null) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("teams_team_" + parts[3] + "_" + userId);
                rows.add(Collections.singletonList(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyboard);
                return;
            }
            sendPlayerCard(bot, db, chatId, player, 0);
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("teams_team_" + player.getTeamId() + "_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä–æ–∫–∞:", keyboard);
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public static void handleRatings(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        List<User> topUsers;
        try {
            topUsers = db.getTopUsersByPoints(10);
        } catch (SQLException e) {
            logger.error("Failed to fetch top users: {}", e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", null);
            return;
        }
        StringBuilder text = new StringBuilder("üèÜ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—á–∫–∞–º:\n\n");
        int rank = 1;
        for (User user : topUsers) {
            text.append(rank).append(". ").append(user.getUsername()).append(": ").append(user.getPoints()).append(" –æ—á–∫–æ–≤\n");
            rank++;
        }
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("start_game_" + userId);
        backRow.add(backButton);
        rows.add(backRow);
        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text.toString(), keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    public static void handleGiftPack(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) throws SQLException {
        Pack dailyPack = db.getPackById(1); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Daily Award Pack –∏–º–µ–µ—Ç ID=1
        if (dailyPack != null && dailyPack.isDaily()) {
            Timestamp lastGift = db.getLastGift(userId);
            long currentTime = System.currentTimeMillis();
            long cooldownMillis = dailyPack.getCooldownHours() * 60 * 60 * 1000L;
            if (lastGift != null && (currentTime - lastGift.getTime()) < cooldownMillis) {
                long timeLeft = (cooldownMillis - (currentTime - lastGift.getTime())) / 1000;
                String errorMessage = String.format("–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π –ø–∞–∫ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ %d:%02d:%02d", timeLeft / 3600, (timeLeft % 3600) / 60, timeLeft % 60);
                InlineKeyboardMarkup keyboard = createBackKeyboard("packs_menu_" + userId);
                editMessage(bot, chatId, messageId, errorMessage, keyboard);
                return;
            }
        }
        // –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –ø–∞–∫–∞
        int claims = db.checkAndResetGiftPackClaims(userId);
        if (claims >= 3) {
            editMessage(bot, chatId, messageId, "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –ø–∞–∫–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.", null);
            return;
        }
        db.incrementGiftPackClaims(userId);
        db.updateLastGift(userId);
        db.addPackToUser(userId, 1); // –î–æ–±–∞–≤–ª—è–µ–º Daily Award Pack
        String text = "üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π –ø–∞–∫!";
        InlineKeyboardMarkup keyboard = createBackKeyboard("packs_my_" + userId);
        editMessage(bot, chatId, messageId, text, keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–º –Ω–∞–±–æ—Ä–µ
    public static void handleNextGiftPlayer(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, int claims) {
        if (claims >= 3) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("start_game_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ (3)!", keyboard);
            return;
        }

        Player player;
        try {
            player = db.getRandomPlayerByCategory("Bronze");
        } catch (SQLException e) {
            logger.error("Failed to fetch random player for gift pack: {}", e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞.", null);
            return;
        }

        if (player == null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("start_game_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞.", keyboard);
            return;
        }

        try {
            db.addPlayerToUser(userId, player);
            db.addPoints(userId, player.getCategory().getPoints());
            db.incrementGiftPackClaims(userId);
            db.updateLastGift(userId);
        } catch (SQLException e) {
            logger.error("Failed to add player or points to userId {}: {}", userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.", null);
            return;
        }

        sendPlayerCard(bot, db, chatId, player, player.getCategory().getPoints());

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        if (claims < 2) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText("–ü–æ–ª—É—á–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞");
            nextButton.setCallbackData("next_gift_player_" + (claims + 1) + "_" + userId);
            row.add(nextButton);
        }
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("start_game_" + userId);
        row.add(backButton);
        rows.add(row);
        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞! (" + (claims + 1) + "/3)", keyboard);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –∫–ª–∞–Ω–æ–≤
    public static void handleClansMenu(TelegramBot bot, long chatId, int messageId, long userId) {
        String text = "üè∞ –ú–µ–Ω—é –∫–ª–∞–Ω–æ–≤:\n\n" +
                "üìä –¢–æ–ø –∫–ª–∞–Ω–æ–≤ - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∞–Ω–æ–≤.\n" +
                "üë• –ú–æ–π –∫–ª–∞–Ω - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ.\n" +
                "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω - –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∫–ª–∞–Ω.";
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton topClansButton = new InlineKeyboardButton();
        topClansButton.setText("üìä –¢–æ–ø –∫–ª–∞–Ω–æ–≤");
        topClansButton.setCallbackData("top_clans_1_" + userId);
        row1.add(topClansButton);
        InlineKeyboardButton myClanButton = new InlineKeyboardButton();
        myClanButton.setText("üë• –ú–æ–π –∫–ª–∞–Ω");
        myClanButton.setCallbackData("my_clan_" + userId);
        row1.add(myClanButton);
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton createClanButton = new InlineKeyboardButton();
        createClanButton.setText("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω");
        createClanButton.setCallbackData("create_clan_" + userId);
        row2.add(createClanButton);
        rows.add(row2);

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("start_game_" + userId);
        backRow.add(backButton);
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text, keyboard);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ø–∞ –∫–ª–∞–Ω–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    public static void handleTopClans(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, int page) {
        List<Clan> clans;
        try {
            clans = db.getTopClans(page, 5);
        } catch (SQLException e) {
            logger.error("Failed to fetch top clans for page {}: {}", page, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∞–Ω–æ–≤.", null);
            return;
        }

        if (clans == null || clans.isEmpty()) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("clans_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–ö–ª–∞–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", keyboard);
            return;
        }

        StringBuilder text = new StringBuilder("üèÜ –¢–æ–ø –∫–ª–∞–Ω–æ–≤ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + "):\n\n");
        int rank = (page - 1) * 5 + 1;
        for (Clan clan : clans) {
            text.append(rank).append(". ").append(clan.getName()).append(": ").append(clan.getTotalPoints()).append(" –æ—á–∫–æ–≤\n");
            rank++;
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Clan clan : clans) {
            InlineKeyboardButton viewButton = new InlineKeyboardButton();
            viewButton.setText("üëÄ " + clan.getName());
            viewButton.setCallbackData("view_clan_" + clan.getId() + "_" + userId);
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(viewButton);
            rows.add(row);
        }

        List<InlineKeyboardButton> navRow = new ArrayList<>();
        if (page > 1) {
            InlineKeyboardButton prevButton = new InlineKeyboardButton();
            prevButton.setText("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è");
            prevButton.setCallbackData("top_clans_" + (page - 1) + "_" + userId);
            navRow.add(prevButton);
        }
        try {
            if (db.getTopClans(page + 1, 5).size() > 0) {
                InlineKeyboardButton nextButton = new InlineKeyboardButton();
                nextButton.setText("–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è");
                nextButton.setCallbackData("top_clans_" + (page + 1) + "_" + userId);
                navRow.add(nextButton);
            }
        } catch (SQLException e) {
            logger.error("Failed to check next page of clans: {}", e.getMessage(), e);
        }
        if (!navRow.isEmpty()) {
            rows.add(navRow);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("clans_menu_" + userId);
        backRow.add(backButton);
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text.toString(), keyboard);
    }

    // –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–ª–∞–Ω
    public static void handleJoinClan(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, int clanId, int page) throws SQLException {
        Clan clan = db.getClanById(clanId);
        if (clan == null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("top_clans_" + page + "_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyboard);
            return;
        }

        Clan existingClan = db.getUserClan(userId);
        if (existingClan != null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("top_clans_" + page + "_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ " + existingClan.getName() + ".", keyboard);
            return;
        }

        try {
            db.joinClan(userId, clanId);
        } catch (SQLException e) {
            logger.error("Failed to join clan with clanId {} for userId {}: {}", clanId, userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ –∫–ª–∞–Ω.", null);
            return;
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("top_clans_" + page + "_" + userId);
        backRow.add(backButton);
        rows.add(backRow);
        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∫–ª–∞–Ω " + clan.getName() + "!", keyboard);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public static void handleMyClan(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) throws SQLException {
        Clan clan;
        try {
            clan = db.getUserClan(userId);
        } catch (SQLException e) {
            logger.error("Failed to fetch clan for userId {}: {}", userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∫–ª–∞–Ω–µ.", null);
            return;
        }
        if (clan == null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("clans_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.", keyboard);
            return;
        }

        List<User> members = db.getClanMembers(clan.getId());
        if (members == null) {
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞.", null);
            return;
        }

        StringBuilder text = new StringBuilder("üè∞ –í–∞—à –∫–ª–∞–Ω: " + clan.getName() + "\n\n");
        text.append("üëë –í–ª–∞–¥–µ–ª–µ—Ü: ");
        User owner = db.getUserById(clan.getOwnerId());
        text.append(owner != null ? owner.getUsername() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").append("\n");
        text.append("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (").append(members.size()).append("):\n");
        for (User member : members) {
            text.append("- ").append(member.getUsername()).append(": ").append(member.getPoints()).append(" –æ—á–∫–æ–≤\n");
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("clans_menu_" + userId);
        backRow.add(backButton);
        rows.add(backRow);
        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text.toString(), keyboard);
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∞–Ω–∞
    public static void handleCreateClan(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        Clan existingClan;
        try {
            existingClan = db.getUserClan(userId);
        } catch (SQLException e) {
            logger.error("Failed to check existing clan for userId {}: {}", userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞.", null);
            return;
        }
        if (existingClan != null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("clans_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ " + existingClan.getName() + ". –ü–æ–∫–∏–Ω—å—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–ª–∞–Ω, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.", keyboard);
            return;
        }

        String clanName = "–ö–ª–∞–Ω_" + userId + "_" + ThreadLocalRandom.current().nextInt(1000);
        int clanId;
        try {
            clanId = db.createClan(clanName, userId);
        } catch (SQLException e) {
            logger.error("Failed to create clan for userId {}: {}", userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–Ω–∞.", null);
            return;
        }

        try {
            db.joinClan(userId, clanId);
        } catch (SQLException e) {
            logger.error("Failed to join created clan with clanId {} for userId {}: {}", clanId, userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–ª–∞–Ω.", null);
            return;
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("clans_menu_" + userId);
        backRow.add(backButton);
        rows.add(backRow);
        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, "–ö–ª–∞–Ω " + clanName + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –í—ã —Å—Ç–∞–ª–∏ –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.", keyboard);
    }

    // –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ
    public static void handleViewClan(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, int clanId, int page) throws SQLException {
        Clan clan = db.getClanById(clanId);
        if (clan == null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("top_clans_" + page + "_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–ö–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyboard);
            return;
        }

        List<User> members = db.getClanMembers(clanId);
        if (members == null) {
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞.", null);
            return;
        }

        StringBuilder text = new StringBuilder("üè∞ –ö–ª–∞–Ω: " + clan.getName() + "\n\n");
        text.append("üëë –í–ª–∞–¥–µ–ª–µ—Ü: ");
        User owner = db.getUserById(clan.getOwnerId());
        text.append(owner != null ? owner.getUsername() : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ").append("\n");
        text.append("üìä –û—á–∫–∏: ").append(clan.getTotalPoints()).append("\n");
        text.append("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (").append(members.size()).append("):\n");
        for (User member : members) {
            text.append("- ").append(member.getUsername()).append(": ").append(member.getPoints()).append(" –æ—á–∫–æ–≤\n");
        }

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> joinRow = new ArrayList<>();
        InlineKeyboardButton joinButton = new InlineKeyboardButton();
        joinButton.setText("‚û°Ô∏è –í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–ª–∞–Ω");
        joinButton.setCallbackData("join_clan_" + clanId + "_" + page + "_" + userId);
        joinRow.add(joinButton);
        rows.add(joinRow);
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("top_clans_" + page + "_" + userId);
        backRow.add(backButton);
        rows.add(backRow);
        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text.toString(), keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞—Ä–∞ –≤ —Å–µ—Ä–∏–∏ –ø–µ–Ω–∞–ª—å—Ç–∏
    public static void handlePenaltyKick(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, String direction, CallbackQuery callbackQuery) {
        TelegramBot.PenaltyGame currentGame = bot.getCurrentGame();
        if (currentGame == null) {
            sendMessage(bot, chatId, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Ä–∏—é –ø–µ–Ω–∞–ª—å—Ç–∏.");
            return;
        }

        long kickerId = currentGame.kicker == 1 ? currentGame.challengerId : currentGame.opponentId;
        long keeperId = currentGame.kicker == 1 ? currentGame.opponentId : currentGame.challengerId;
        String kickerUsername = currentGame.kicker == 1 ? currentGame.challengerUsername : currentGame.opponentUsername;
        String keeperUsername = currentGame.kicker == 1 ? currentGame.opponentUsername : currentGame.challengerUsername;

        if (currentGame.currentRound == 1 && userId != kickerId) {
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            answer.setText("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
            answer.setShowAlert(true);
            try {
                bot.execute(answer);
            } catch (Exception e) {
                logger.error("Failed to send alert to user {}: {}", userId, e.getMessage(), e);
            }
            return;
        }
        if (currentGame.currentRound == 2 && userId != keeperId) {
            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            answer.setText("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!");
            answer.setShowAlert(true);
            try {
                bot.execute(answer);
            } catch (Exception e) {
                logger.error("Failed to send alert to user {}: {}", userId, e.getMessage(), e);
            }
            return;
        }

        if (currentGame.currentRound == 1) {
            currentGame.kickDirection = direction;
            currentGame.currentRound = 2;
            sendSaveDirectionMessage(bot, chatId, keeperId, keeperUsername);
        } else {
            String keeperDirection = direction;
            String kickDirection = currentGame.kickDirection;
            boolean isGoal = !kickDirection.equals(keeperDirection);
            String resultText = isGoal ? "‚öΩ –ì–û–õ! ü•Ö" : "ü•Ö –í—Ä–∞—Ç–∞—Ä—å –ø–æ–π–º–∞–ª –º—è—á!";

            if (currentGame.kicker == 1) {
                currentGame.challengerGoals.add(isGoal);
                currentGame.challengerKicks++;
            } else {
                currentGame.opponentGoals.add(isGoal);
                currentGame.opponentKicks++;
            }

            sendMessage(bot, chatId, resultText, null);
            currentGame.kickDirection = null;
            currentGame.currentRound = 1;
            currentGame.kicker = (currentGame.kicker == 1) ? 2 : 1;

            if (currentGame.challengerKicks >= 5 && currentGame.opponentKicks >= 5) {
                int challengerScore = currentGame.getChallengerScore();
                int opponentScore = currentGame.getOpponentScore();
                if (challengerScore != opponentScore) {
                    showPenaltyResults(bot, chatId);
                    return;
                } else {
                    sendMessage(bot, chatId, "–°—á—ë—Ç —Ä–∞–≤–Ω—ã–π –ø–æ—Å–ª–µ 5 —É–¥–∞—Ä–æ–≤! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–Ω–µ–∑–∞–ø–Ω–æ–π —Å–º–µ—Ä—Ç–∏!", null);
                }
            }

            if (currentGame == null) return;

            kickerId = currentGame.kicker == 1 ? currentGame.challengerId : currentGame.opponentId;
            kickerUsername = currentGame.kicker == 1 ? currentGame.challengerUsername : currentGame.opponentUsername;

            if (currentGame.challengerKicks < 5 || currentGame.opponentKicks < 5) {
                sendKickDirectionMessage(bot, chatId, kickerId, kickerUsername);
            } else {
                sendKickDirectionMessage(bot, chatId, kickerId, kickerUsername);
                if (currentGame.challengerKicks > 5 && currentGame.opponentKicks > 5 && currentGame.challengerKicks == currentGame.opponentKicks) {
                    int challengerScore = currentGame.getChallengerScore();
                    int opponentScore = currentGame.getOpponentScore();
                    if (challengerScore != opponentScore) {
                        showPenaltyResults(bot, chatId);
                    }
                }
            }
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω—ã —É–¥–∞—Ä–∞
    public static void sendSaveDirectionMessage(TelegramBot bot, long chatId, long userId, String username) {
        TelegramBot.PenaltyGame currentGame = bot.getCurrentGame();
        int kickNumber = currentGame.kicker == 1 ? currentGame.challengerKicks + 1 : currentGame.opponentKicks + 1;
        String text = username + ", –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è –∑–∞—â–∏—Ç—ã (–£–¥–∞—Ä " + kickNumber + "):";

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton leftButton = new InlineKeyboardButton();
        leftButton.setText("–õ–µ–≤—ã–π —É–≥–æ–ª");
        leftButton.setCallbackData("penalty_kick_left_" + userId);
        row.add(leftButton);

        InlineKeyboardButton centerButton = new InlineKeyboardButton();
        centerButton.setText("–¶–µ–Ω—Ç—Ä");
        centerButton.setCallbackData("penalty_kick_center_" + userId);
        row.add(centerButton);

        InlineKeyboardButton rightButton = new InlineKeyboardButton();
        rightButton.setText("–ü—Ä–∞–≤—ã–π —É–≥–æ–ª");
        rightButton.setCallbackData("penalty_kick_right_" + userId);
        row.add(rightButton);

        rows.add(row);
        keyboard.setKeyboard(rows);

        sendMessage(bot, chatId, text, keyboard);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–µ—Ä–∏–∏ –ø–µ–Ω–∞–ª—å—Ç–∏
    public static void showPenaltyResults(TelegramBot bot, long chatId) {
        TelegramBot.PenaltyGame currentGame = bot.getCurrentGame();
        if (currentGame == null) {
            sendMessage(bot, chatId, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
            return;
        }

        int challengerScore = currentGame.getChallengerScore();
        int opponentScore = currentGame.getOpponentScore();

        StringBuilder text = new StringBuilder("üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–µ—Ä–∏–∏ –ø–µ–Ω–∞–ª—å—Ç–∏:\n\n");
        text.append(currentGame.challengerUsername).append(": ").append(challengerScore).append(" –≥–æ–ª–∞\n");
        text.append(currentGame.opponentUsername).append(": ").append(opponentScore).append(" –≥–æ–ª–∞\n\n");

        if (challengerScore > opponentScore) {
            text.append("üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ").append(currentGame.challengerUsername).append("!");
            try (DatabaseManager db = new DatabaseManager()) {
                db.addPoints(currentGame.challengerId, 10);
                db.addDollars(currentGame.challengerId, 50);
                text.append("\n–ù–∞–≥—Ä–∞–¥–∞: +10 –æ—á–∫–æ–≤, +50 –¥–æ–ª–ª–∞—Ä–æ–≤");
            } catch (SQLException e) {
                logger.error("Failed to award points/dollars to challenger {}: {}", currentGame.challengerId, e.getMessage(), e);
            }
        } else if (opponentScore > challengerScore) {
            text.append("üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ").append(currentGame.opponentUsername).append("!");
            try (DatabaseManager db = new DatabaseManager()) {
                db.addPoints(currentGame.opponentId, 10);
                db.addDollars(currentGame.opponentId, 50);
                text.append("\n–ù–∞–≥—Ä–∞–¥–∞: +10 –æ—á–∫–æ–≤, +50 –¥–æ–ª–ª–∞—Ä–æ–≤");
            } catch (SQLException e) {
                logger.error("Failed to award points/dollars to opponent {}: {}", currentGame.opponentId, e.getMessage(), e);
            }
        } else {
            text.append("ü§ù –ù–∏—á—å—è!");
        }

        bot.setCurrentGame(null); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
        sendMessage(bot, chatId, text.toString());
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞
    public static String formatTime(long millis) {
        long seconds = millis / 1000;
        long minutes = seconds / 60;
        long hours = minutes / 60;
        minutes = minutes % 60;
        seconds = seconds % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    public static void sendKickDirectionMessage(TelegramBot bot, long chatId, long userId, String username) {
        TelegramBot.PenaltyGame currentGame = bot.getCurrentGame();
        int kickNumber = currentGame.kicker == 1 ? currentGame.challengerKicks + 1 : currentGame.opponentKicks + 1;
        String text = username + ", –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ—Ä–æ–Ω—É —É–¥–∞—Ä–∞ (–£–¥–∞—Ä " + kickNumber + "):";

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        InlineKeyboardButton leftButton = new InlineKeyboardButton();
        leftButton.setText("–õ–µ–≤—ã–π —É–≥–æ–ª");
        leftButton.setCallbackData("penalty_kick_left_" + userId);
        row.add(leftButton);

        InlineKeyboardButton centerButton = new InlineKeyboardButton();
        centerButton.setText("–¶–µ–Ω—Ç—Ä");
        centerButton.setCallbackData("penalty_kick_center_" + userId);
        row.add(centerButton);

        InlineKeyboardButton rightButton = new InlineKeyboardButton();
        rightButton.setText("–ü—Ä–∞–≤—ã–π —É–≥–æ–ª");
        rightButton.setCallbackData("penalty_kick_right_" + userId);
        row.add(rightButton);

        rows.add(row);
        keyboard.setKeyboard(rows);

        sendMessage(bot, chatId, text, keyboard);
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é —Å–æ—Å—Ç–∞–≤–∞ –∫–æ–º–∞–Ω–¥—ã
    public static void handleSquadMenu(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        Squad squad = bot.getUserSquad(userId);
        StringBuilder text = new StringBuilder("‚öΩ –í–∞—à —Å–æ—Å—Ç–∞–≤:\n\n");

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        text.append("1. GK (GK): ").append(squad.getPlayer("GK") != null ?
                squad.getPlayer("GK").getName() + " " + squad.getPlayer("GK").getCategory().getEmoji() + squad.getPlayer("GK").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("2. DEF (CB): ").append(squad.getPlayer("CB1") != null ?
                squad.getPlayer("CB1").getName() + " " + squad.getPlayer("CB1").getCategory().getEmoji() +  squad.getPlayer("CB1").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("3. DEF (CB): ").append(squad.getPlayer("CB2") != null ?
                squad.getPlayer("CB2").getName() + " " + squad.getPlayer("CB2").getCategory().getEmoji() +  squad.getPlayer("CB2").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("4. DEF (CB): ").append(squad.getPlayer("CB3") != null ?
                squad.getPlayer("CB3").getName() + " " + squad.getPlayer("CB3").getCategory().getEmoji() +  squad.getPlayer("CB3").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("5. MID (MID): ").append(squad.getPlayer("MID1") != null ?
                squad.getPlayer("MID1").getName() + " " + squad.getPlayer("MID1").getCategory().getEmoji() +  squad.getPlayer("MID1").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("6. MID (MID): ").append(squad.getPlayer("MID2") != null ?
                squad.getPlayer("MID2").getName() + " " + squad.getPlayer("MID2").getCategory().getEmoji() +  squad.getPlayer("MID2").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("7. MID (MID): ").append(squad.getPlayer("MID3") != null ?
                squad.getPlayer("MID3").getName() + " " + squad.getPlayer("MID3").getCategory().getEmoji() +  squad.getPlayer("MID3").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("8. FRW (FRW): ").append(squad.getPlayer("FRW1") != null ?
                squad.getPlayer("FRW1").getName() + " " + squad.getPlayer("FRW1").getCategory().getEmoji() +  squad.getPlayer("FRW1").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("9. FRW (FRW): ").append(squad.getPlayer("FRW2") != null ?
                squad.getPlayer("FRW2").getName() + " " + squad.getPlayer("FRW2").getCategory().getEmoji() +  squad.getPlayer("FRW2").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("10. FRW (FRW): ").append(squad.getPlayer("FRW3") != null ?
                squad.getPlayer("FRW3").getName() + " " + squad.getPlayer("FRW3").getCategory().getEmoji() +  squad.getPlayer("FRW3").getRating() : "–ü—É—Å—Ç–æ").append("\n");
        text.append("11. EXTRA (EXTRA): ").append(squad.getPlayer("EXTRA") != null ?
                squad.getPlayer("EXTRA").getName() + " " + squad.getPlayer("EXTRA").getCategory().getEmoji()  + squad.getPlayer("EXTRA").getRating() : "–ü—É—Å—Ç–æ").append("\n");

        // –û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Å—Ç–∞–≤–∞
        int totalRating = squad.calculateRating();
        text.append("\n–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ—Å—Ç–∞–≤–∞: ").append(totalRating);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–π
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        InlineKeyboardButton gkButton = new InlineKeyboardButton();
        gkButton.setText("GK");
        gkButton.setCallbackData("squad_position_GK_" + userId);
        row1.add(gkButton);
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        InlineKeyboardButton cb1Button = new InlineKeyboardButton();
        cb1Button.setText("DEF");
        cb1Button.setCallbackData("squad_position_CB1_" + userId);
        row2.add(cb1Button);
        InlineKeyboardButton cb2Button = new InlineKeyboardButton();
        cb2Button.setText("DEF");
        cb2Button.setCallbackData("squad_position_CB2_" + userId);
        row2.add(cb2Button);
        InlineKeyboardButton cb3Button = new InlineKeyboardButton();
        cb3Button.setText("DEF");
        cb3Button.setCallbackData("squad_position_CB3_" + userId);
        row2.add(cb3Button);
        rows.add(row2);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É–∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        InlineKeyboardButton mid1Button = new InlineKeyboardButton();
        mid1Button.setText("MID");
        mid1Button.setCallbackData("squad_position_MID1_" + userId);
        row3.add(mid1Button);
        InlineKeyboardButton mid2Button = new InlineKeyboardButton();
        mid2Button.setText("MID");
        mid2Button.setCallbackData("squad_position_MID2_" + userId);
        row3.add(mid2Button);
        InlineKeyboardButton mid3Button = new InlineKeyboardButton();
        mid3Button.setText("MID");
        mid3Button.setCallbackData("squad_position_MID3_" + userId);
        row3.add(mid3Button);
        rows.add(row3);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–ø–∞–¥–∞—é—â–∏—Ö
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        InlineKeyboardButton frw1Button = new InlineKeyboardButton();
        frw1Button.setText("FRW");
        frw1Button.setCallbackData("squad_position_FRW1_" + userId);
        row4.add(frw1Button);
        InlineKeyboardButton frw2Button = new InlineKeyboardButton();
        frw2Button.setText("FRW");
        frw2Button.setCallbackData("squad_position_FRW2_" + userId);
        row4.add(frw2Button);
        InlineKeyboardButton frw3Button = new InlineKeyboardButton();
        frw3Button.setText("FRW");
        frw3Button.setCallbackData("squad_position_FRW3_" + userId);
        row4.add(frw3Button);
        rows.add(row4);

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ
        List<InlineKeyboardButton> row5 = new ArrayList<>();
        InlineKeyboardButton extraButton = new InlineKeyboardButton();
        extraButton.setText("EXTRA");
        extraButton.setCallbackData("squad_position_EXTRA_" + userId);
        row5.add(extraButton);
        rows.add(row5);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("start_game_" + userId);
        backRow.add(backButton);
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        editMessage(bot, chatId, messageId, text.toString(), keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ—Å—Ç–∞–≤–µ
    public static void handleSquadPosition(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, String position) {
        int page = 1;
        String[] parts = position.split("_");
        if (parts.length > 1 && parts[parts.length - 2].equals("page")) {
            try {
                page = Integer.parseInt(parts[parts.length - 1]);
                position = position.substring(0, position.lastIndexOf("_page_"));
            } catch (NumberFormatException e) {
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏: {}", position, e);
                page = 1;
            }
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        List<Player> players;
        try {
            players = db.getUserPlayers(userId);
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤.", null);
            return;
        }

        if (players == null || players.isEmpty()) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("squad_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–£ –≤–∞—Å –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞.", keyboard);
            return;
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        List<Player> availablePlayers = new ArrayList<>();
        for (Player player : players) {
            if (position.startsWith("GK") && player.getPosition().equals("GK")) {
                availablePlayers.add(player);
            } else if (position.startsWith("CB") && player.getPosition().equals("CB")) {
                availablePlayers.add(player);
            } else if (position.startsWith("MID") && player.getPosition().equals("MID")) {
                availablePlayers.add(player);
            } else if (position.startsWith("FRW") && player.getPosition().equals("FRW")) {
                availablePlayers.add(player);
            } else if (position.equals("EXTRA") && !player.getPosition().equals("GK")) {
                availablePlayers.add(player);
            }
        }

        if (availablePlayers.isEmpty()) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("squad_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ " + position + ".", keyboard);
            return;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        int pageSize = 5;
        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ " + position + " (–°—Ç—Ä–∞–Ω–∏—Ü–∞ " + page + "):";
        InlineKeyboardMarkup keyboard = createPlayerKeyboard(db, availablePlayers, "squad_select_" + position, userId, page, pageSize, position);
        editMessage(bot, chatId, messageId, text, keyboard);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
    public static void handleSquadSelectPlayer(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId, String position, int playerId) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
        Player player;
        try {
            player = db.getPlayerById(playerId);
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ —Å ID {}: {}", playerId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞.", null);
            return;
        }

        if (player == null) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("squad_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", keyboard);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∏–≥—Ä–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        boolean isValid = false;
        if (position.startsWith("GK") && player.getPosition().equals("GK")) {
            isValid = true;
        } else if (position.startsWith("CB") && player.getPosition().equals("CB")) {
            isValid = true;
        } else if (position.startsWith("MID") && player.getPosition().equals("MID")) {
            isValid = true;
        } else if (position.startsWith("FRW") && player.getPosition().equals("FRW")) {
            isValid = true;
        } else if (position.equals("EXTRA") && !player.getPosition().equals("GK")) {
            isValid = true;
        }

        if (!isValid) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("squad_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ " + position + ".", keyboard);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ —Å–æ—Å—Ç–∞–≤–µ –Ω–∞ –¥—Ä—É–≥–æ–π –ø–æ–∑–∏—Ü–∏–∏
        Squad squad = bot.getUserSquad(userId);
        boolean playerAlreadyInSquad = squad.getAllPlayers().stream()
                .anyMatch(p -> p != null && p.getId() == playerId && !squad.getPlayer(position).equals(p));

        if (playerAlreadyInSquad) {
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("squad_menu_" + userId);
            backRow.add(backButton);
            rows.add(backRow);
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ —É–∂–µ –µ—Å—Ç—å –≤ –≤–∞—à–µ–º —Å–æ—Å—Ç–∞–≤–µ –Ω–∞ –¥—Ä—É–≥–æ–π –ø–æ–∑–∏—Ü–∏–∏!", keyboard);
            return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        squad.setPlayer(position, player);
        handleSquadMenu(bot, db, chatId, messageId, userId);
    }

    public static void handleSquadEdit(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) throws SQLException {
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Squad –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Squad squad = new Squad(db, userId);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ db.saveUserSquad —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–∞–≤, –∏ –æ–Ω –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ Squad –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏)
        List<Player> players = squad.getAllPlayers();
        List<String> positions = Squad.getPositions();

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        StringBuilder text = new StringBuilder("‚öΩ –í–∞—à —Å–æ—Å—Ç–∞–≤:\n\n");
        int totalRating = 0;
        int playerCount = 0;

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        for (int i = 0; i < positions.size(); i++) {
            String position = positions.get(i);
            Player player = players.get(i);
            if (player != null) {
                String displayPosition = position.startsWith("CB") ? "CB" :
                        position.startsWith("MID") ? "MID" :
                                position.startsWith("FRW") ? "FRW" : position;
                text.append(String.format("%d. %s: %s %d", i + 1, displayPosition, player.getName(), player.getRating()));

                // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞–≥—Ä–∞–¥
                int rating = player.getRating();
                if (rating >= 90) {
                    text.append(" üíé");
                } else if (rating >= 85) {
                    text.append(" üèÜ");
                }
                text.append("\n");

                totalRating += rating;
                playerCount++;
            }
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        int averageRating = playerCount > 0 ? totalRating / playerCount : 0;
        text.append(String.format("\n–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: %d", averageRating));

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è GK
        InlineKeyboardButton gkButton = new InlineKeyboardButton();
        gkButton.setText("GK");
        gkButton.setCallbackData("squad_position_goalkeeper_" + userId);
        rows.add(List.of(gkButton));

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è CB (CB1, CB2, CB3)
        List<InlineKeyboardButton> cbRow = new ArrayList<>();
        for (String pos : Arrays.asList("CB1", "CB2", "CB3")) {
            InlineKeyboardButton cbButton = new InlineKeyboardButton();
            cbButton.setText("CB");
            cbButton.setCallbackData("squad_position_defender_" + userId);
            cbRow.add(cbButton);
        }
        rows.add(cbRow);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è MID (MID1, MID2, MID3)
        List<InlineKeyboardButton> midRow = new ArrayList<>();
        for (String pos : Arrays.asList("MID1", "MID2", "MID3")) {
            InlineKeyboardButton midButton = new InlineKeyboardButton();
            midButton.setText("MID");
            midButton.setCallbackData("squad_position_midfielder_" + userId);
            midRow.add(midButton);
        }
        rows.add(midRow);

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è FRW (FRW1, FRW2, FRW3)
        List<InlineKeyboardButton> frwRow = new ArrayList<>();
        for (String pos : Arrays.asList("FRW1", "FRW2", "FRW3")) {
            InlineKeyboardButton frwButton = new InlineKeyboardButton();
            frwButton.setText("FRW");
            frwButton.setCallbackData("squad_position_forward_" + userId);
            frwRow.add(frwButton);
        }
        rows.add(frwRow);

        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è EXTRA
        InlineKeyboardButton extraButton = new InlineKeyboardButton();
        extraButton.setText("EXTRA");
        extraButton.setCallbackData("squad_position_extra_" + userId);
        rows.add(List.of(extraButton));

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("–ù–∞–∑–∞–¥");
        backButton.setCallbackData("start_game_" + userId);
        rows.add(List.of(backButton));

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup(rows);
        editMessage(bot, chatId, messageId, text.toString(), keyboard);
    }

    public static void handleMyPacks(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        try {
            List<Pack> userPacks = db.getUserPacks(userId);
            StringBuilder text = new StringBuilder("üì¶ **–ú–æ–∏ –ø–∞–∫–∏**:\n\n");
            if (userPacks.isEmpty()) {
                text.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞–∫–æ–≤.");
            } else {
                for (Pack pack : userPacks) {
                    text.append(String.format("üì¶ %s ‚Äî %d –∏–≥—Ä–æ–∫–æ–≤\n", pack.getName(), pack.getPlayerCount()));
                }
            }

            InlineKeyboardMarkup keyboard = createBackKeyboard("packs_menu_" + userId);
            editMessage(bot, chatId, messageId, text.toString(), keyboard);
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            InlineKeyboardMarkup keyboard = createBackKeyboard("packs_menu_" + userId);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–∫–æ–≤.", keyboard);
        }
    }

    public static void handleMoneyPacks(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞ –¥–æ–ª–ª–∞—Ä—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤ Pack –µ—Å—Ç—å –ø–æ–ª–µ –¥–ª—è –≤–∞–ª—é—Ç—ã –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä)
            List<Pack> availablePacks = db.getAvailablePacks(); // –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ DatabaseManager
            StringBuilder text = new StringBuilder("üíµ **–ü–∞–∫–∏ –∑–∞ –¥–æ–ª–ª–∞—Ä—ã**:\n\n");
            if (availablePacks.isEmpty()) {
                text.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–æ–≤.");
            } else {
                for (Pack pack : availablePacks) {
                    text.append(String.format("üì¶ %s ‚Äî %d –¥–æ–ª–ª–∞—Ä–æ–≤\n", pack.getName(), pack.getPrice()));
                }
            }

            InlineKeyboardMarkup keyboard = createMoneyPacksKeyboard(availablePacks, userId);
            editMessage(bot, chatId, messageId, text.toString(), keyboard);
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–æ–≤ –∑–∞ –¥–æ–ª–ª–∞—Ä—ã: {}", e.getMessage(), e);
            InlineKeyboardMarkup keyboard = createBackKeyboard("packs_menu_" + userId);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–∫–æ–≤.", keyboard);
        }
    }

    private static InlineKeyboardMarkup createMoneyPacksKeyboard(List<Pack> packs, long userId) {
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for (Pack pack : packs) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(pack.getName() + " (" + pack.getPrice() + "üíµ)");
            button.setCallbackData("buy_pack_" + pack.getId() + "_" + userId);
            keyboard.add(List.of(button));
        }
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨Ö –ù–∞–∑–∞–¥");
        backButton.setCallbackData("packs_menu_" + userId);
        keyboard.add(List.of(backButton));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(keyboard);
        return markup;
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
    private static InlineKeyboardMarkup createBackKeyboard(String callbackData) {
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚¨Ö –ù–∞–∑–∞–¥");
        backButton.setCallbackData(callbackData);
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(List.of(List.of(backButton)));
        return markup;
    }

    public static void sendClanNotification(TelegramBot bot, DatabaseManager db, int clanId, String message) {
        try {
            List<User> members = db.getClanMembers(clanId);
            if (members == null || members.isEmpty()) {
                logger.warn("–ö–ª–∞–Ω —Å ID {} –Ω–µ –∏–º–µ–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.", clanId);
                return;
            }

            for (User member : members) {
                SendMessage notification = new SendMessage();
                notification.setChatId(String.valueOf(member.getId()));
                notification.setText("<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç –∫–ª–∞–Ω–∞:</b>\n" + message);
                notification.setParseMode("HTML");
                try {
                    bot.execute(notification);
                } catch (Exception e) {
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", member.getId(), e.getMessage(), e);
                }
            }
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–ª–µ–Ω–æ–≤ –∫–ª–∞–Ω–∞ {}: {}", clanId, e.getMessage(), e);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –≤ –∫–ª–∞–Ω–µ
    public static boolean checkClanPermission(DatabaseManager db, long userId, int clanId, boolean ownerOnly) {
        try {
            Clan clan = db.getClanById(clanId);
            if (clan == null) {
                logger.error("–ö–ª–∞–Ω —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω.", clanId);
                return false;
            }
            if (ownerOnly && clan.getOwnerId() != userId) {
                logger.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞ {}.", userId, clanId);
                return false;
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–ª–∞–Ω–µ
            List<User> members = db.getClanMembers(clanId);
            return members.stream().anyMatch(member -> member.getId() == userId);
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –≤ –∫–ª–∞–Ω–µ {}: {}", userId, clanId, e.getMessage(), e);
            return false;
        }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤
    public static String formatPlayerList(List<Player> players, boolean includeRating) {
        StringBuilder text = new StringBuilder();
        if (players == null || players.isEmpty()) {
            text.append("–ò–≥—Ä–æ–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        } else {
            for (Player player : players) {
                text.append("- ").append(player.getName()).append(" (").append(player.getPosition()).append(")");
                if (includeRating) {
                    text.append(" - ").append(player.getRating());
                }
                text.append("\n");
            }
        }
        return text.toString();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–ª–∞–Ω–∞
    public static void handleLeaveClan(TelegramBot bot, DatabaseManager db, long chatId, int messageId, long userId) {
        try {
            Clan clan = db.getUserClan(userId);
            if (clan == null) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("clans_menu_" + userId);
                rows.add(List.of(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.", keyboard);
                return;
            }

            if (clan.getOwnerId() == userId) {
                InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> rows = new ArrayList<>();
                InlineKeyboardButton backButton = new InlineKeyboardButton();
                backButton.setText("–ù–∞–∑–∞–¥");
                backButton.setCallbackData("clans_menu_" + userId);
                rows.add(List.of(backButton));
                keyboard.setKeyboard(rows);
                editMessage(bot, chatId, messageId, "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–ª–∞–Ω–∞. –ù–∞–∑–Ω–∞—á—å—Ç–µ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏–ª–∏ —Ä–∞—Å—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∫–ª–∞–Ω.", keyboard);
                return;
            }

            db.leaveClan(userId, clan.getId());
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("–ù–∞–∑–∞–¥");
            backButton.setCallbackData("clans_menu_" + userId);
            rows.add(List.of(backButton));
            keyboard.setKeyboard(rows);
            editMessage(bot, chatId, messageId, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∫–ª–∞–Ω " + clan.getName() + ".", keyboard);

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —á–ª–µ–Ω–æ–≤ –∫–ª–∞–Ω–∞
            sendClanNotification(bot, db, clan.getId(), "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + db.getUserById(userId).getUsername() + " –ø–æ–∫–∏–Ω—É–ª –∫–ª–∞–Ω.");
        } catch (SQLException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –∏–∑ –∫–ª–∞–Ω–∞: {}", userId, e.getMessage(), e);
            editMessage(bot, chatId, messageId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–ª–∞–Ω–∞.", null);
        }
    }
    
}